"""Renders all glTF-Sample-Assets using gltf_basic_materials."""

from pathlib import Path
import json
import subprocess
import os
import shutil
import datetime
import socket
from typing import Optional
import dataclasses
import argparse


def _get_git_head_commit() -> str:
    """Returns the HEAD SHA"""
    process = subprocess.run(['git', 'rev-parse', 'HEAD'], capture_output=True)
    return process.stdout.decode()


def _load_and_render_model(program: Path, output: Path, asset: Path):
    """Renders a specific model using BigWheels sample app.
    
    Several files are created:

    - actual.ppm: Screenshot generated by BigWheels
    - ppx.log: Log generated by BigWheels logging framework
    - stdout.log: Standard output generate by BigWheels (looks identical to ppx.log)
    - stderr.log: Standard error generate by BigWheels
    - exit_status.txt: Exit status of the program

    Arguments:
        program: TODO
        output: Place to store all the files mentioned
        asset: Path relative to //third_party/assets
    
    Raises:
        Some exception on failure; no exception indicates success
    """
    command = [
        program,
        '--frame-count', '2',
        '--screenshot-frame-number', '1',
        '--gltf-scene-asset', asset,
        '--screenshot-path', 'actual.ppm',
        '--headless']
    process = subprocess.run(command, cwd=output, capture_output=True)
    (output / 'stdout.log').write_bytes(process.stdout)
    (output / 'stderr.log').write_bytes(process.stderr)
    (output / 'exit_status.txt').write_text(str(process.returncode))


@dataclasses.dataclass
class TestCase:
    # Asset to feed into the test program
    asset: str
    # Human-readable label, mostly for the report
    description: str


def _build_test_cases(model_index: dict) -> dict[str, TestCase]:
    """Extracts relevant info from GLTF samples index for running tests and making a report.
    
    TODO
    """
    test_cases: dict[str, TestCase] = {}
    for model in model_index:
        name = model['name']
        variants = model['variants']
        for variant_name in variants:
            variant_file = variants[variant_name]

            test_cases[f'{name}-{variant_name}'] = TestCase(
                asset=f'glTF-Sample-Assets/Models/{name}/{variant_name}/{variant_file}',
                description=f'{name}/{variant_name}')
    return test_cases


def _run_tests(test_cases: dict[str, TestCase], output_path: Path, program: Path):
    test_names = list(test_cases.keys())
    for i in range(len(test_names)):
        test_name = test_names[i]
        print(f'{i+1}/{len(test_names)}: {test_name}')
        test_case = test_cases[test_name]
        test_output_path = output_path / test_name
        os.mkdir(test_output_path)
        _load_and_render_model(program, test_output_path, test_case.asset)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--program', type=Path, required=True)
    parser.add_argument('--model-index', type=Path, required=True)
    parser.add_argument('--output', type=Path, required=True)
    args = parser.parse_args()

    with args.model_index.open('r') as model_index_file:
        model_index = json.load(model_index_file)

    os.mkdir(args.output)
    with (args.output / 'meta.json').open('w') as meta_file:
        json.dump({
            'host': str(socket.getfqdn()),
            'datetime': str(datetime.datetime.now()),
            'sha': _get_git_head_commit()
        }, meta_file)
    _run_tests(_build_test_cases(model_index), args.output, args.program)


if __name__ == '__main__':
    main()
